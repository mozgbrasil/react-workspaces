{"version":3,"sources":["../../../shared/codepen.io/space-globethree-js/index.jsx","../../../shared/codepen.io/space-globethree-js/src/script.js"],"names":["App","greeting","name","_loaded","addScript","url","script","document","createElement","type","addEventListener","event","console","log","path","src","getElementsByTagName","appendChild","useState","count","useEffect","main","a","then","ret","intervalId","setInterval","THREE","clearInterval","itens","forEach","item","index","item_ret","length","setTimeout","require","catch","error","className","id","renderer","scene","camera","sphereBg","nucleus","stars","controls","timeout_Debounce","container","getElementById","noise","SimplexNoise","onWindowResize","aspect","clientWidth","clientHeight","updateProjectionMatrix","setSize","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","set","directionalLight","DirectionalLight","add","ambientLight","AmbientLight","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","domElement","OrbitControls","autoRotate","autoRotateSpeed","maxDistance","minDistance","enablePan","loader","TextureLoader","textureSphereBg","load","texturenucleus","textureStar","texture1","texture2","texture4","anisotropy","icosahedronGeometry","IcosahedronGeometry","lambertMaterial","MeshPhongMaterial","map","Mesh","geometrySphereBg","SphereBufferGeometry","materialSphereBg","MeshBasicMaterial","side","BackSide","starsGeometry","Geometry","i","particleStar","randomPointSphere","velocity","MathUtils","randInt","startX","x","startY","y","startZ","z","vertices","push","starsMaterial","PointsMaterial","size","color","transparent","opacity","blending","AdditiveBlending","createStars","texture","total","pointGeometry","pointMaterial","particles","Points","radius","theta","Math","PI","random","phi","acos","dx","sin","cos","dy","dz","Vector3","depthWrite","init","animate","geometry","v","time","Date","now","normalize","distance","parameters","noise3D","multiplyScalar","verticesNeedUpdate","normalsNeedUpdate","computeVertexNormals","computeFaceNormals","rotation","update","render","requestAnimationFrame","clearTimeout"],"mappings":"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","file":"static/js/17.e099d5e1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./src/style.scss\";\n\nfunction App({ greeting, name }) {\n  let _loaded = {};\n  function addScript(url) {\n    if (!_loaded[url]) {\n      var script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.addEventListener(\"load\", function (event) {\n        console.log(\"script loaded: \", event.path[0].src);\n      });\n      script.src = url;\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n      //   document.head.appendChild(script);\n      _loaded[url] = true;\n      return _loaded;\n    }\n  }\n\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    //\n    (function () {\n      async function main(url) {\n        return addScript(url);\n      }\n\n      main(\"https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.min.js\")\n        .then((ret) => {\n          console.log(\"ret: \", ret);\n\n          //\n          var intervalId = setInterval(function () {\n            console.log(\"setInterval ret: \", ret);\n            if (typeof THREE !== \"undefined\") {\n              clearInterval(intervalId);\n              //\n\n              let itens = [\n                \"https://cdn.jsdelivr.net/npm/three@0.121.1/examples/js/controls/OrbitControls.js\",\n                \"https://cdnjs.cloudflare.com/ajax/libs/simplex-noise/2.4.0/simplex-noise.min.js\",\n              ];\n\n              // console.log(` itens.length: ${itens.length} `);\n\n              itens.forEach(function (item, index) {\n                //   console.log(`index: ${index} - item: `, item);\n\n                main(item)\n                  .then((item_ret) => {\n                    //   console.log(\n                    //     `index: ${index} - itens.length: ${itens.length} -item_ret: `,\n                    //     item_ret\n                    //   );\n\n                    if (index === itens.length - 1) {\n                      console.log(`script`);\n                      setTimeout(function () {\n                        console.log(`script`);\n                        require(\"./src/script.js\");\n                      }, 1000);\n                    }\n                  })\n                  .catch(console.error);\n              });\n              //\n            }\n          }, 1000);\n          //\n        })\n        .catch(console.error);\n    })();\n    //\n  }, [count]); // Apenas re-execute o efeito quando o count mudar\n\n  return (\n    <div className='space-globethree-js'>\n      <div id='canvas_container'></div>\n\n      {/* <button id='fullscr'>Go Fullscreen</button> */}\n    </div>\n  );\n}\n\nexport default App;\n","let renderer,\n  scene,\n  camera,\n  sphereBg,\n  nucleus,\n  stars,\n  controls,\n  container = document.getElementById(\"canvas_container\"),\n  timeout_Debounce,\n  noise = new SimplexNoise(),\n  cameraSpeed = 0,\n  blobScale = 3;\n\ninit();\nanimate();\n\nfunction init() {\n  scene = new THREE.Scene();\n\n  camera = new THREE.PerspectiveCamera(\n    55,\n    window.innerWidth / window.innerHeight,\n    0.01,\n    1000\n  );\n  camera.position.set(0, 0, 230);\n\n  const directionalLight = new THREE.DirectionalLight(\"#fff\", 2);\n  directionalLight.position.set(0, 50, -20);\n  scene.add(directionalLight);\n\n  let ambientLight = new THREE.AmbientLight(\"#ffffff\", 1);\n  ambientLight.position.set(0, 20, 20);\n  scene.add(ambientLight);\n\n  renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n  });\n  renderer.setSize(container.clientWidth, container.clientHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  container.appendChild(renderer.domElement);\n\n  //OrbitControl\n  controls = new THREE.OrbitControls(camera, renderer.domElement);\n  controls.autoRotate = true;\n  controls.autoRotateSpeed = 4;\n  controls.maxDistance = 350;\n  controls.minDistance = 150;\n  controls.enablePan = false;\n\n  const loader = new THREE.TextureLoader();\n  const textureSphereBg = loader.load(\n    \"https://i.ibb.co/4gHcRZD/bg3-je3ddz.jpg\"\n  );\n  const texturenucleus = loader.load(\n    \"https://i.ibb.co/hcN2qXk/star-nc8wkw.jpg\"\n  );\n  const textureStar = loader.load(\"https://i.ibb.co/ZKsdYSz/p1-g3zb2a.png\");\n  const texture1 = loader.load(\"https://i.ibb.co/F8by6wW/p2-b3gnym.png\");\n  const texture2 = loader.load(\"https://i.ibb.co/yYS2yx5/p3-ttfn70.png\");\n  const texture4 = loader.load(\"https://i.ibb.co/yWfKkHh/p4-avirap.png\");\n\n  /*  Nucleus  */\n  texturenucleus.anisotropy = 16;\n  let icosahedronGeometry = new THREE.IcosahedronGeometry(30, 10);\n  let lambertMaterial = new THREE.MeshPhongMaterial({ map: texturenucleus });\n  nucleus = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n  scene.add(nucleus);\n\n  /*    Sphere  Background   */\n  textureSphereBg.anisotropy = 16;\n  let geometrySphereBg = new THREE.SphereBufferGeometry(150, 40, 40);\n  let materialSphereBg = new THREE.MeshBasicMaterial({\n    side: THREE.BackSide,\n    map: textureSphereBg,\n  });\n  sphereBg = new THREE.Mesh(geometrySphereBg, materialSphereBg);\n  scene.add(sphereBg);\n\n  /*    Moving Stars   */\n  let starsGeometry = new THREE.Geometry();\n\n  for (let i = 0; i < 50; i++) {\n    let particleStar = randomPointSphere(150);\n\n    particleStar.velocity = THREE.MathUtils.randInt(50, 200);\n\n    particleStar.startX = particleStar.x;\n    particleStar.startY = particleStar.y;\n    particleStar.startZ = particleStar.z;\n\n    starsGeometry.vertices.push(particleStar);\n  }\n  let starsMaterial = new THREE.PointsMaterial({\n    size: 5,\n    color: \"#ffffff\",\n    transparent: true,\n    opacity: 0.8,\n    map: textureStar,\n    blending: THREE.AdditiveBlending,\n  });\n  starsMaterial.depthWrite = false;\n  stars = new THREE.Points(starsGeometry, starsMaterial);\n  scene.add(stars);\n\n  /*    Fixed Stars   */\n  function createStars(texture, size, total) {\n    let pointGeometry = new THREE.Geometry();\n    let pointMaterial = new THREE.PointsMaterial({\n      size: size,\n      map: texture,\n      blending: THREE.AdditiveBlending,\n    });\n\n    for (let i = 0; i < total; i++) {\n      let radius = THREE.MathUtils.randInt(149, 70);\n      let particles = randomPointSphere(radius);\n      pointGeometry.vertices.push(particles);\n    }\n    return new THREE.Points(pointGeometry, pointMaterial);\n  }\n  scene.add(createStars(texture1, 15, 20));\n  scene.add(createStars(texture2, 5, 5));\n  scene.add(createStars(texture4, 7, 5));\n\n  function randomPointSphere(radius) {\n    let theta = 2 * Math.PI * Math.random();\n    let phi = Math.acos(2 * Math.random() - 1);\n    let dx = 0 + radius * Math.sin(phi) * Math.cos(theta);\n    let dy = 0 + radius * Math.sin(phi) * Math.sin(theta);\n    let dz = 0 + radius * Math.cos(phi);\n    return new THREE.Vector3(dx, dy, dz);\n  }\n}\n\nfunction animate() {\n  //Stars  Animation\n  stars.geometry.vertices.forEach(function (v) {\n    v.x += (0 - v.x) / v.velocity;\n    v.y += (0 - v.y) / v.velocity;\n    v.z += (0 - v.z) / v.velocity;\n\n    v.velocity -= 0.3;\n\n    if (v.x <= 5 && v.x >= -5 && v.z <= 5 && v.z >= -5) {\n      v.x = v.startX;\n      v.y = v.startY;\n      v.z = v.startZ;\n      v.velocity = THREE.MathUtils.randInt(50, 300);\n    }\n  });\n\n  //Nucleus Animation\n  nucleus.geometry.vertices.forEach(function (v) {\n    let time = Date.now();\n    v.normalize();\n    let distance =\n      nucleus.geometry.parameters.radius +\n      noise.noise3D(\n        v.x + time * 0.0005,\n        v.y + time * 0.0003,\n        v.z + time * 0.0008\n      ) *\n        blobScale;\n    v.multiplyScalar(distance);\n  });\n  nucleus.geometry.verticesNeedUpdate = true;\n  nucleus.geometry.normalsNeedUpdate = true;\n  nucleus.geometry.computeVertexNormals();\n  nucleus.geometry.computeFaceNormals();\n  nucleus.rotation.y += 0.002;\n\n  //Sphere Beckground Animation\n  sphereBg.rotation.x += 0.002;\n  sphereBg.rotation.y += 0.002;\n  sphereBg.rotation.z += 0.002;\n\n  controls.update();\n  stars.geometry.verticesNeedUpdate = true;\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\n/*     Resize     */\nwindow.addEventListener(\"resize\", () => {\n  clearTimeout(timeout_Debounce);\n  timeout_Debounce = setTimeout(onWindowResize, 80);\n});\nfunction onWindowResize() {\n  camera.aspect = container.clientWidth / container.clientHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(container.clientWidth, container.clientHeight);\n}\n\n/*     Fullscreen btn     */\n// let fullscreen;\n// let fsEnter = document.getElementById('fullscr');\n// fsEnter.addEventListener('click', function (e) {\n//     e.preventDefault();\n//     if (!fullscreen) {\n//         fullscreen = true;\n//         document.documentElement.requestFullscreen();\n//         fsEnter.innerHTML = \"Exit Fullscreen\";\n//     }\n//     else {\n//         fullscreen = false;\n//         document.exitFullscreen();\n//         fsEnter.innerHTML = \"Go Fullscreen\";\n//     }\n// });\n"],"sourceRoot":""}