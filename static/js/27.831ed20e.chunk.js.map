{"version":3,"sources":["pages/Estatistica.js"],"names":["controllers","Object","values","Chartjs","filter","chart","undefined","id","Chart","register","jsonObj","jsonData","MONTHS","Styled","styled","div","useState","message","useEffect","getFuncName","window","chartColors","red","orange","yellow","green","blue","purple","grey","global","COLORS","Samples","Color","utils","srand","seed","this","_seed","rand","min","max","numbers","config","i","value","cfg","from","count","decimals","continuity","dfactor","Math","pow","data","push","round","labels","step","prefix","months","section","ceil","substring","color","index","length","transparentize","opacity","alpha","rgbString","randomScalingFactor","Date","now","keys","dynamicColors","floor","random","onComplete_1","event","console","log","chartInstance","ctx","textAlign","textBaseline","datasets","forEach","dataset","getDatasetMeta","bar","fillText","x","y","onComplete_2","document","getElementById","addEventListener","setTimeout","warn","obj","typeRandom","_","collection","collect","i1","dataset_id","CountFilterByDataSet","key","dezenas","includes","backgroundColor","label","borderColor","borderWidth","datas","backgroundColors","elementId","element","type","fillColor","strokeColor","highlightFill","highlightStroke","options","responsive","legend","display","position","title","text","animation","duration","onComplete","createElement","appendChild","getContext","datasets_month","i2","month_index","month","leading_month","leadingzero","filterByMonth","where","mainJS","className","style"],"mappings":"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","file":"static/js/27.831ed20e.chunk.js","sourcesContent":["import { getFuncName } from \"@mozg/react-labs/src/components/Util\";\nimport {\n  Chart,\n  LineController,\n  RadarController,\n  LineElement,\n  PointElement,\n  LinearScale,\n  Title,\n  CategoryScale,\n} from \"chart.js\";\nimport { color } from \"chart.js/helpers\"; // THIS IS THE KEY!\nimport * as Chartjs from \"chart.js\";\nconst controllers = Object.values(Chartjs).filter(\n  (chart) => chart.id !== undefined\n);\nChart.register(...controllers);\nimport collect from \"collect.js\";\nimport leadingzero from \"leadingzero\";\nimport _ from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport jsonData from \"./assets/d_mega.json\";\n\n// console.log(\n//   \"getOwnPropertyNames(Chart): \",\n//   Object.getOwnPropertyNames(Chart).sort()\n// );\n\n// Object.getOwnPropertyNames(Chart)\n//   .sort()\n//   .forEach(function (val, idx, array) {\n//     console.log(`getOwnPropertyNames(${val}: `, Chart[val]);\n//   });\n\nconst loadData = [...jsonData];\nlet jsonObj = loadData;\n// jsonObj = jsonObj.slice(0, 20);\n// console.log(\n//   `typeof: ${typeof jsonObj} - length: ${jsonObj.length} -  jsonObj: `,\n//   jsonObj\n// );\n// let jsonList = JSON.stringify(jsonObj);\n// console.log(`typeof: ${typeof jsonList} - -  jsonList: `, jsonList);\nlet max_dataset_index = 60;\n// max_dataset_index = max_dataset_index + 1;\nlet delay = 10;\nlet max_month = 12;\n\nvar MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst Styled = styled.div`\n  * {\n    box-sizing: border-box;\n  }\n\n  html,\n  body {\n    background-color: #222;\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n  }\n\n  .dashboard {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    min-width: 200px;\n    min-height: 500px;\n  }\n\n  .column {\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-wrap: wrap;\n  }\n\n  .item {\n    margin: 5px;\n    flex-grow: 1;\n    min-height: 250px;\n    min-width: 250px;\n  }\n\n  .small.item {\n    min-width: 305px;\n  }\n\n  #br {\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    flex-wrap: wrap;\n    min-height: 250px;\n  }\n\n  #br > section {\n    flex-grow: 1;\n  }\n`;\n\n// https://pt-br.reactjs.org/docs/hooks-effect.html\n\nexport default () => {\n  //   const [itemsCharts, setItemsCharts] = useState([]);\n  //   const [intervalId, setintervalId] = useState([]);\n  const [message, setMessage] = useState();\n  //   const [randomImage, setRandomImage] = useState(null);\n\n  const textJavascript = () => {\n    // console.log(\"textJavascript: \");\n\n    //\n\n    // https://www.chartjs.org/samples/latest/utils.js\n\n    const utilsJS = () => {\n      //   \"use strict\";\n      getFuncName();\n\n      window.chartColors = {\n        red: \"rgb(255, 99, 132)\",\n        orange: \"rgb(255, 159, 64)\",\n        yellow: \"rgb(255, 205, 86)\",\n        green: \"rgb(75, 192, 192)\",\n        blue: \"rgb(54, 162, 235)\",\n        purple: \"rgb(153, 102, 255)\",\n        grey: \"rgb(201, 203, 207)\",\n      };\n\n      (function (global) {\n        // console.log(\"window: \", window);\n        // console.log(\"global: \", global);\n        var MONTHS = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\",\n        ];\n\n        var COLORS = [\n          \"#4dc9f6\",\n          \"#f67019\",\n          \"#f53794\",\n          \"#537bc4\",\n          \"#acc236\",\n          \"#166a8f\",\n          \"#00a950\",\n          \"#58595b\",\n          \"#8549ba\",\n        ];\n\n        var Samples = global.Samples || (global.Samples = {});\n        var Color = global.Color;\n\n        Samples.utils = {\n          // Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n          srand: function (seed) {\n            this._seed = seed;\n          },\n\n          rand: function (min, max) {\n            var seed = this._seed;\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            this._seed = (seed * 9301 + 49297) % 233280;\n            return min + (this._seed / 233280) * (max - min);\n          },\n\n          numbers: function (config) {\n            var cfg = config || {};\n            var min = cfg.min || 0;\n            var max = cfg.max || 1;\n            var from = cfg.from || [];\n            var count = cfg.count || 8;\n            var decimals = cfg.decimals || 8;\n            var continuity = cfg.continuity || 1;\n            var dfactor = Math.pow(10, decimals) || 0;\n            var data = [];\n            var i, value;\n\n            for (i = 0; i < count; ++i) {\n              value = (from[i] || 0) + this.rand(min, max);\n              if (this.rand() <= continuity) {\n                data.push(Math.round(dfactor * value) / dfactor);\n              } else {\n                data.push(null);\n              }\n            }\n\n            return data;\n          },\n\n          labels: function (config) {\n            var cfg = config || {};\n            var min = cfg.min || 0;\n            var max = cfg.max || 100;\n            var count = cfg.count || 8;\n            var step = (max - min) / count;\n            var decimals = cfg.decimals || 8;\n            var dfactor = Math.pow(10, decimals) || 0;\n            var prefix = cfg.prefix || \"\";\n            var values = [];\n            var i;\n\n            for (i = min; i < max; i += step) {\n              values.push(prefix + Math.round(dfactor * i) / dfactor);\n            }\n\n            return values;\n          },\n\n          months: function (config) {\n            var cfg = config || {};\n            var count = cfg.count || 12;\n            var section = cfg.section;\n            var values = [];\n            var i, value;\n\n            for (i = 0; i < count; ++i) {\n              value = MONTHS[Math.ceil(i) % 12];\n              values.push(value.substring(0, section));\n            }\n\n            return values;\n          },\n\n          color: function (index) {\n            return COLORS[index % COLORS.length];\n          },\n\n          transparentize: function (color, opacity) {\n            var alpha = opacity === undefined ? 0.5 : 1 - opacity;\n            return Color(color).alpha(alpha).rgbString();\n          },\n        };\n\n        // DEPRECATED\n        window.randomScalingFactor = function () {\n          return Math.round(Samples.utils.rand(-100, 100));\n        };\n\n        // INITIALIZATION\n\n        Samples.utils.srand(Date.now());\n      })(window);\n    };\n\n    // view-source:https://www.chartjs.org/samples/latest/charts/bar/vertical.html\n\n    const mainJS = () => {\n      getFuncName();\n\n      //\n\n      //   var color = Chart.instances.color;\n      var colorNames = Object.keys(window.chartColors);\n\n      //\n\n      //   function Dump(obj) {\n      //     for (var [key, value] of Object.entries(obj)) {\n      //       let label = key;\n      //       if (typeof value === \"function\") {\n      //         console.log(`${label}: `, Object.getOwnPropertyNames(value).sort());\n      //       } else {\n      //         console.log(`${label}: `, value);\n      //       }\n      //     }\n      //   }\n\n      //\n\n      var dynamicColors = function () {\n        var r = Math.floor(Math.random() * 255);\n        var g = Math.floor(Math.random() * 255);\n        var b = Math.floor(Math.random() * 255);\n        return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      };\n\n      //\n\n      //\n\n      // https://www.it-swarm.dev/pt/javascript/mostrar-valores-na-parte-superior-das-barras-no-chart.js/829820107/\n\n      function onComplete_1(event) {\n        console.log(\"onComplete_1\");\n\n        let chartInstance = event.chart;\n        let ctx = chartInstance.ctx;\n\n        // ctx.font = Chart.instances.fontString(\n        //   Chart.defaults.global.defaultFontSize,\n        //   Chart.defaults.global.defaultFontStyle,\n        //   Chart.defaults.global.defaultFontFamily\n        // );\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"bottom\";\n\n        chartInstance.data.datasets.forEach(function (dataset, i) {\n          var meta = chartInstance.getDatasetMeta(i);\n\n          meta.data.forEach(function (bar, index) {\n            var data = dataset.data[index];\n            ctx.fillText(data, bar.x, bar.y - 5);\n          });\n        });\n      }\n\n      //\n\n      // https://jsfiddle.net/4mxhogmd/1/\n\n      function onComplete_2(event) {\n        console.log(\"onComplete_2\");\n\n        let chartInstance = event.chart;\n        let ctx = chartInstance.ctx;\n\n        // ctx.font = Chart.instances.fontString(\n        //   Chart.defaults.global.defaultFontSize,\n        //   Chart.defaults.global.defaultFontStyle,\n        //   Chart.defaults.global.defaultFontFamily\n        // );\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"bottom\";\n\n        chartInstance.data.datasets.forEach(function (dataset, i) {\n          var meta = chartInstance.getDatasetMeta(i);\n          meta.data.forEach(function (bar, index) {\n            var data = dataset.data[index];\n            ctx.fillText(data, bar.x, bar.y - 5);\n          });\n        });\n      }\n\n      //\n\n      document\n        .getElementById(\"shuffle\")\n        .addEventListener(\"click\", function () {});\n\n      function ChartsSorting() {\n        // Object.getOwnPropertyNames(Chart)\n        //   .sort()\n        //   .forEach(function (val, idx, array) {\n        //     console.log(`getOwnPropertyNames(${val}: `, Chart[val]);\n        //   });\n        Chart.instances.each(Chart.instances, function (chart) {\n          if (chart.ctx.canvas.id === \"chart_1\") {\n            console.log(\"chart: \", chart);\n\n            let datasets = [];\n\n            let labelArray = chart.data.labels;\n            let dataArray = chart.data.datasets[0].data.slice();\n            //   console.log(`labelArray: `, labelArray);\n            //   console.log(`dataArray: `, dataArray);\n\n            dataArray.forEach(function (value, index) {\n              // console.log(`index: ${index} value:: `, value);\n              datasets.push({\n                label: labelArray[index],\n                value: value,\n              });\n            });\n\n            console.log(`datasets: `, datasets);\n\n            let sorted = datasets.sort(function (a, b) {\n              return a.value - b.value;\n            });\n\n            console.log(`sorted: `, sorted);\n\n            //\n\n            //  labels & datas = array lists\n\n            //   console.log(`typeof ${typeof datasets} datasets: `, datasets);\n\n            var labels = [];\n            var datas = [];\n            datasets.forEach(function (item, index) {\n              // console.log(`index: ${index} item:: `, item);\n              let label = item.label;\n              let data = item.value;\n              labels.push(label);\n              datas.push(data);\n            });\n\n            //\n\n            chart.data.labels = labels;\n            chart.data.datasets[0].data = datas;\n            chart.update();\n\n            //\n          }\n        });\n      }\n\n      setTimeout(function () {\n        // ChartsSorting();\n        console.warn(\"ChartsSorting\");\n      }, 1000);\n\n      // https://jsfiddle.net/kingBethal/r23y0h6n/\n\n      //   let plugin_chartjs_sort_data = {\n      //     beforeUpdate: function(chart) {\n      //       if (chart.options.sort) {\n      //         let dataArray = chart.data.datasets[0].data.slice();\n      //         let dataIndexes = dataArray.map((d, i) => i);\n      //         dataIndexes.sort((a, b) => {\n      //           return dataArray[a] - dataArray[b];\n      //         });\n\n      //         // sort data array as well\n      //         dataArray.sort((a, b) => a - b);\n\n      //         // At this point dataIndexes is sorted by value of the data, so we know how the indexes map to each other\n      //         let meta = chart.getDatasetMeta(0);\n      //         let newMeta = [];\n      //         // let labels = chart.data.labels;\n      //         let newLabels = [];\n\n      //         meta.data.forEach((a, i) => {\n      //           newMeta[dataIndexes[i]] = a;\n      //           newLabels[dataIndexes[i]] = chart.data.labels[i];\n      //         });\n\n      //         meta.data = newMeta;\n      //         chart.data.datasets[0].data = dataArray;\n      //         chart.data.labels = newLabels;\n      //       }\n      //     }\n      //   };\n\n      //   Chart.defaults.global.animation.duration = 2000;\n\n      //   Chart.plugins.register(plugin_chartjs_sort_data);\n\n      //\n\n      // chart_0\n      //   (function () {\n      //     // \"use strict\";\n\n      //     console.warn(\"chart_1\");\n\n      //     function chart(run = true) {\n      //       if (run === false) return false;\n      //       getFuncName();\n      //       //\n\n      //       let obj = [\"line\", \"bar\", \"radar\"];\n      //       obj = [\"bar\"];\n      //       let length = obj.length - 1;\n      //       let random = _.random(0, length);\n      //       let typeRandom = obj[random];\n\n      //       //   console.log(\"typeRandom: \", typeRandom);\n\n      //       //\n\n      //       console.log(\n      //         \"%c - \",\n      //         \"background: black; color: white\",\n      //         `collection data`\n      //       );\n\n      //       //\n\n      //       let datasets = [];\n\n      //       const collection = collect(jsonObj);\n\n      //       let i0 = 1;\n      //       while (i0 <= 60) {\n      //         let dataset_id = i0;\n      //         //\n\n      //         let filterByDataSet = collection.filter((value, key) => {\n      //           //   return value > 2;\n      //           let dezenas = value.dezenas;\n      //           let condition_2 = dezenas.includes(dataset_id);\n      //           return condition_2 ? value : 0;\n      //         });\n\n      //         // let AllFilterByDataSet = filterByDataSet.all();\n\n      //         let CountFilterByDataSet = filterByDataSet.count();\n\n      //         //\n\n      //         let backgroundColor = [];\n      //         backgroundColor.push(dynamicColors());\n\n      //         let value = CountFilterByDataSet ? CountFilterByDataSet : 0;\n\n      //         datasets.push({\n      //           label: `Dataset: ${dataset_id} `,\n      //           backgroundColor: backgroundColor,\n      //           borderColor: backgroundColor,\n      //           borderWidth: 1,\n      //           data: [value],\n      //         });\n\n      //         //\n      //         i0++;\n      //       }\n\n      //       //  labels & datas = array lists\n\n      //       //   console.log(`typeof ${typeof datasets} datasets: `, datasets);\n\n      //       var labels = [];\n      //       var datas = [];\n      //       var backgroundColors = [];\n      //       datasets.forEach(function (value, index) {\n      //         //   console.log(`index: ${index} value:: `, value);\n      //         let label = value.label;\n      //         let data = value.data[0];\n      //         let backgroundColor = value.backgroundColor;\n      //         labels.push(label);\n      //         datas.push(data);\n      //         backgroundColors.push(backgroundColor);\n      //       });\n\n      //       //\n\n      //       let config = {\n      //         type: typeRandom,\n      //         data: {\n      //           labels: labels,\n      //           datasets: [\n      //             {\n      //               label: \"Index\",\n      //               backgroundColor: backgroundColors,\n      //               borderColor: backgroundColors,\n      //               fillColor: backgroundColors,\n      //               strokeColor: backgroundColors,\n      //               highlightFill: backgroundColors,\n      //               highlightStroke: backgroundColors,\n      //               borderWidth: 1,\n      //               data: datas,\n      //             },\n      //           ],\n      //         },\n      //         options: {\n      //           responsive: true,\n      //           legend: {\n      //             display: true,\n      //             position: \"top\",\n      //           },\n      //           title: {\n      //             display: true,\n      //             text: \"Números mais sorteados entre o periodo 11/03/1996 - 02/05/2020\",\n      //           },\n      //           animation: {\n      //             duration: 1,\n      //             onComplete: function (event) {\n      //               //  onComplete_0(event);\n      //             },\n      //           },\n      //         },\n      //       };\n\n      //       console.log(\"config: \", config);\n\n      //       //\n\n      //       console.log(\n      //         \"%c - \",\n      //         \"background: black; color: white\",\n      //         `new chart_0`\n      //       );\n\n      //       let elementId, element;\n\n      //       elementId = \"legend_0\";\n      //       element = document.createElement(\"div\");\n      //       element.id = elementId;\n      //       document.getElementById(\"chart-container\").appendChild(element);\n\n      //       elementId = \"chart_0\";\n      //       element = document.createElement(\"canvas\");\n      //       element.id = elementId;\n      //       document.getElementById(\"chart-container\").appendChild(element);\n\n      //       let ctx = document.getElementById(elementId).getContext(\"2d\");\n\n      //       new Chart(ctx, config);\n\n      //       console.log(\"new chart_0\");\n      //     }\n      //     //\n      //     chart();\n      //     //\n      //   })();\n\n      // chart_1\n      (function () {\n        // \"use strict\";\n\n        console.warn(\"chart_1\");\n\n        function chart(run = true) {\n          if (run === false) return false;\n          getFuncName();\n          //\n\n          let obj = [\"line\", \"bar\", \"radar\"];\n          obj = [\"bar\"];\n          let length = obj.length - 1;\n          let random = _.random(0, length);\n          let typeRandom = obj[random];\n\n          //   console.log(\"typeRandom: \", typeRandom);\n\n          //\n\n          console.log(\n            \"%c - \",\n            \"background: black; color: white\",\n            `collection data`\n          );\n\n          let datasets = [];\n\n          const collection = collect(jsonObj);\n\n          let i1 = 1;\n          while (i1 < max_dataset_index) {\n            let dataset_id = i1;\n            //\n\n            let filterByDataSet = collection.filter((value, key) => {\n              //   return value > 2;\n              let dezenas = value.dezenas;\n              let condition_2 = dezenas.includes(dataset_id);\n              return condition_2 ? value : 0;\n            });\n\n            // console.log(\n            //   ` dataset_index: ${dataset_id} - filterByDataSet : `,\n            //   filterByDataSet\n            // );\n\n            // let AllFilterByDataSet = filterByDataSet.all();\n\n            // console.log(\n            //   `dataset_index: ${dataset_id} - AllFilterByDataSet : `,\n            //   AllFilterByDataSet\n            // );\n\n            let CountFilterByDataSet = filterByDataSet.count();\n\n            // console.log(\n            //   `dataset_index: ${dataset_id} - CountFilterByDataSet : `,\n            //   CountFilterByDataSet\n            // );\n\n            //\n\n            let backgroundColor = [];\n            backgroundColor.push(dynamicColors());\n\n            let value = CountFilterByDataSet ? CountFilterByDataSet : 0;\n\n            datasets.push({\n              label: `Dataset: ${dataset_id} `,\n              backgroundColor: backgroundColor,\n              borderColor: backgroundColor,\n              borderWidth: 1,\n              data: [value],\n            });\n\n            //\n            i1++;\n          }\n\n          //  labels & datas = array lists\n\n          //   console.log(`typeof ${typeof datasets} datasets: `, datasets);\n\n          var labels = [];\n          var datas = [];\n          var backgroundColors = [];\n          datasets.forEach(function (value, index) {\n            //   console.log(`index: ${index} value:: `, value);\n            let label = value.label;\n            let data = value.data[0];\n            let backgroundColor = value.backgroundColor;\n            labels.push(label);\n            datas.push(data);\n            backgroundColors.push(backgroundColor);\n          });\n\n          //\n\n          let config = {\n            type: typeRandom,\n            data: {\n              labels: labels,\n              datasets: [\n                {\n                  label: \"Index\",\n                  backgroundColor: backgroundColors,\n                  borderColor: backgroundColors,\n                  fillColor: backgroundColors,\n                  strokeColor: backgroundColors,\n                  highlightFill: backgroundColors,\n                  highlightStroke: backgroundColors,\n                  borderWidth: 1,\n                  data: datas,\n                },\n              ],\n            },\n            options: {\n              responsive: true,\n              legend: {\n                display: true,\n                position: \"top\",\n              },\n              title: {\n                display: true,\n                text: \"Numeros mais sorteados de cada mês entre o periodo 11/03/1996 - 02/05/2020\",\n              },\n              animation: {\n                duration: 1,\n                onComplete: function (event) {\n                  onComplete_1(event);\n                },\n              },\n            },\n          };\n\n          console.log(\"config: \", config);\n\n          //\n\n          console.log(\n            \"%c - \",\n            \"background: black; color: white\",\n            `new chart_1`\n          );\n\n          let elementId, element;\n\n          elementId = \"legend_1\";\n          element = document.createElement(\"div\");\n          element.id = elementId;\n          document.getElementById(\"chart-container\").appendChild(element);\n\n          elementId = \"chart_1\";\n          element = document.createElement(\"canvas\");\n          element.id = elementId;\n          document.getElementById(\"chart-container\").appendChild(element);\n\n          let ctx = document.getElementById(elementId).getContext(\"2d\");\n\n          new Chart(ctx, config);\n\n          console.log(\"new chart_1\");\n        }\n        //\n        chart();\n        //\n      })();\n\n      // chart_2\n      (function () {\n        // \"use strict\";\n\n        console.warn(\"chart_2\");\n\n        function chart(run = true) {\n          if (run === false) return false;\n          getFuncName();\n          //\n\n          let obj = [\"line\", \"bar\", \"radar\"];\n          obj = [\"bar\"];\n          let length = obj.length - 1;\n          let random = _.random(0, length);\n          let typeRandom = obj[random];\n\n          //   console.log(\"typeRandom: \", typeRandom);\n\n          //\n\n          console.log(\n            \"%c - \",\n            \"background: black; color: white\",\n            `collection data`\n          );\n\n          var datasets_month = [];\n\n          const collection = collect(jsonObj);\n\n          let i2 = 0;\n          while (i2 < max_month) {\n            let month_index = i2;\n            let month = i2 + 1;\n            let leading_month = leadingzero(month, 2);\n\n            console.log(\n              \"%c - \",\n              \"background: black; color: white\",\n              `month: `,\n              month\n            );\n\n            //\n\n            datasets_month[month_index] = [];\n\n            //\n\n            const filterByMonth = collection.where(\n              \"datasorteio_month\",\n              leading_month\n            );\n\n            // console.log(\n            //   ` leading_month: ${leading_month} - filterByMonth : `,\n            //   filterByMonth\n            // );\n\n            // let AllFilterByMonth = filterByMonth.all();\n\n            // console.log(\n            //   ` leading_month: ${leading_month} - AllFilterByMonth : `,\n            //   AllFilterByMonth\n            // );\n\n            let CountFilterByMonth = filterByMonth.count();\n\n            // console.log(\n            //   `leading_month: ${leading_month} - CountFilterByMonth : `,\n            //   CountFilterByMonth\n            // );\n\n            //\n\n            if (CountFilterByMonth > 0) {\n              let i1 = 1;\n              while (i1 < max_dataset_index) {\n                let dataset_id = i1;\n\n                //\n\n                //\n\n                let filterByDataSet = filterByMonth.filter((value, key) => {\n                  //   return value > 2;\n                  let dezenas = value.dezenas;\n                  let condition_2 = dezenas.includes(dataset_id);\n                  return condition_2 ? value : 0;\n                });\n\n                // console.log(\n                //   ` dataset_index: ${dataset_id} - filterByDataSet : `,\n                //   filterByDataSet\n                // );\n\n                // let AllFilterByDataSet = filterByDataSet.all();\n\n                // console.log(\n                //   `dataset_index: ${dataset_id} - AllFilterByDataSet : `,\n                //   AllFilterByDataSet\n                // );\n\n                let CountFilterByDataSet = filterByDataSet.count();\n\n                // console.log(\n                //   `dataset_index: ${dataset_id} - CountFilterByDataSet : `,\n                //   CountFilterByDataSet\n                // );\n\n                //\n\n                let backgroundColor = [];\n                backgroundColor.push(dynamicColors());\n\n                let value = CountFilterByDataSet ? CountFilterByDataSet : 0;\n\n                datasets_month[month_index].push({\n                  label: `Dataset: ${dataset_id} `,\n                  backgroundColor: backgroundColor,\n                  borderColor: backgroundColor,\n                  borderWidth: 1,\n                  data: [value],\n                });\n\n                // console.log(\n                //   \"datasets_month[month_index].push: \",\n                //   datasets_month\n                // );\n\n                //\n                i1++;\n              }\n\n              //\n\n              //   console.log(\n              //     `typeof ${typeof datasets_month} datasets_month:: `,\n              //     datasets_month\n              //   );\n\n              //\n            }\n\n            //\n\n            i2++;\n          }\n\n          //\n\n          //   setItemsCharts(itemsCharts => [...itemsCharts, datasets_month]);\n\n          //\n\n          console.log(\n            \"%c - \",\n            \"background: black; color: white\",\n            `new Chart(s)`\n          );\n\n          let i = 0;\n          while (i < max_month) {\n            console.log(\n              \"%c - \",\n              \"background: black; color: white\",\n              `chart_2_${i + 1}: `\n            );\n\n            //\n\n            let month_index = i;\n            let month = i + 1;\n\n            //\n\n            // console.log(\"datasets_month: \", datasets_month);\n\n            let datasets = datasets_month[month_index];\n\n            // console.log(\n            //   `typeof ${typeof datasets} datasets_month:: `,\n            //   datasets\n            // );\n\n            //  labels & datas = array lists\n\n            // console.log(`typeof ${typeof datasets} datasets: `, datasets);\n\n            let labels = [];\n            let datas = [];\n            let backgroundColors = [];\n            datasets.forEach(function (value, index) {\n              //   console.log(`index: ${index} value:: `, value);\n              let label = value.label;\n              let data = value.data[0];\n              let backgroundColor = value.backgroundColor;\n              labels.push(label);\n              datas.push(data);\n              backgroundColors.push(backgroundColor);\n            });\n\n            // console.log(\"labels: \", labels);\n\n            //\n\n            let config = {\n              type: typeRandom,\n              data: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: MONTHS[month_index],\n                    backgroundColor: backgroundColors,\n                    borderColor: backgroundColors,\n                    fillColor: backgroundColors,\n                    strokeColor: backgroundColors,\n                    highlightFill: backgroundColors,\n                    highlightStroke: backgroundColors,\n                    borderWidth: 1,\n                    data: datas,\n                  },\n                ],\n              },\n              options: {\n                responsive: true,\n                legend: {\n                  display: true,\n                  position: \"top\",\n                },\n                title: {\n                  display: true,\n                  text: MONTHS[month_index],\n                },\n                animation: {\n                  duration: 1,\n                  onComplete: function (event) {\n                    onComplete_2(event);\n                  },\n                },\n              },\n            };\n\n            // console.log(\"config: \", config);\n\n            //\n\n            let elementId, element;\n\n            elementId = \"legend_2_\" + month;\n            element = document.createElement(\"div\");\n            element.id = elementId;\n            document.getElementById(\"chart-container\").appendChild(element);\n\n            elementId = \"chart_2_\" + month;\n            element = document.createElement(\"canvas\");\n            element.id = elementId;\n            document.getElementById(\"chart-container\").appendChild(element);\n\n            let ctx = document.getElementById(elementId).getContext(\"2d\");\n\n            new Chart(ctx, config);\n\n            console.log(\"new chart_2_\" + month);\n\n            i++;\n          }\n        }\n        //\n        chart();\n        //\n      })();\n\n      //\n    };\n\n    //\n\n    utilsJS();\n    mainJS();\n\n    //\n  };\n\n  // Similar ao componentDidMount e componentDidUpdate:\n  useEffect(() => {\n    getFuncName();\n\n    textJavascript();\n    //\n  }, []);\n\n  return (\n    <>\n      <Styled>\n        <div className='container-fluid'>\n          <div className='card '>\n            <div className='card-header text-center'>\n              {message ? message : \"Chart.js\"}\n            </div>\n            <div className='card-body'>\n              <div id='chart-container'></div>\n            </div>\n            <div className='card-footer text-muted text-center'>\n              <div style={{ display: \"none\" }}>\n                <button id='randomizeData'>Randomize Data</button>\n                <button id='addDataset'>Add Dataset</button>\n                <button id='removeDataset'>Remove Dataset</button>\n                <button id='addData'>Add Data</button>\n                <button id='removeData'>Remove Data</button>\n              </div>\n              <div style={{ display: \"none\" }}>\n                <button id='Smooth'>Smooth</button>\n                <button id='Randomize'>Randomize</button>\n              </div>\n              <button\n                type='button'\n                className='btn btn-primary'\n                id='shuffle'\n                style={{ display: \"none\" }}\n              >\n                Sort Data\n              </button>\n\n              {/* <div>\n                {(() => {\n                  console.log(\"IIFE - render\");\n                  //   console.log(\"intervalId: \", intervalId);\n                  //   let jsonIntervalId = JSON.stringify(intervalId);\n                  //   let jsoncCartsData = JSON.stringify(itemsCharts);\n                  console.log(\n                    `itemsCharts ${typeof itemsCharts}: `,\n                    itemsCharts\n                  );\n                  //   let itemsChartsDepp = [...itemsCharts];\n                  //   itemsChartsDepp = JSON.stringify(itemsChartsDepp);\n                  return (\n                    <>\n                      <h1>{Math.random()}</h1>\n                      <hr />\n                      <span>\n                        {typeof itemsCharts} {Object.keys(itemsCharts).length}{\" \"}\n                        {JSON.stringify(itemsCharts)}\n                      </span>\n                    </>\n                  );\n                })()}\n\n                <hr />\n\n                {itemsCharts.map((item, index) => (\n                  <>\n                    <p key={index} style={{ border: \"2px solid red\" }}>\n                      {index} - {JSON.stringify(item)}\n                    </p>\n                  </>\n                ))}\n\n                <hr />\n\n                {(() => {\n                  if (!_.isEmpty(intervalId)) {\n                  }\n                })()}\n              </div> */}\n            </div>\n          </div>\n        </div>\n        <p>&nbsp;</p>\n      </Styled>\n    </>\n  );\n};\n"],"sourceRoot":""}