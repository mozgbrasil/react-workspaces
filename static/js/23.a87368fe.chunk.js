(this["webpackJsonp@mozg/react-workspace"]=this["webpackJsonp@mozg/react-workspace"]||[]).push([[23],{220:function(e,n,r){},380:function(e,n,r){"use strict";r.r(n);var a=r(38),t=r(115),o=r(8),i=(r(46),r(125)),c=r(403),l=r(404),s=r(413),d=r(39),m=r(40),f=r(41),v=function(e){Object(m.a)(r,e);var n=Object(f.a)(r);function r(e){return Object(d.a)(this,r),n.call(this,{vertexShader:"varying vec3 worldNormal;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }",fragmentShader:"varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }",side:t.BackSide})}return r}(t.ShaderMaterial),u=function(e){Object(m.a)(r,e);var n=Object(f.a)(r);function r(e){var a;return Object(d.a)(this,r),(a=n.call(this,{vertexShader:"varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0);\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize(worldPosition.xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }",fragmentShader:"uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      \n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      float ior = 1.5;\n      float a = 0.33;\n      \n      vec3 fogColor = vec3(1.0);\n      vec3 reflectionColor = vec3(1.0);\n      \n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow( 1.08 + dot( viewDirection, worldNormal), 10.0 );\n      }\n      \n      void main() {\n        // screen coordinates\n        vec2 uv = gl_FragCoord.xy / resolution;\n      \n        // sample backface data from texture\n        vec3 backfaceNormal = texture2D(backfaceMap, uv).rgb;\n      \n        // combine backface and frontface normal\n        vec3 normal = worldNormal * (1.0 - a) - backfaceNormal * a;\n      \n        // calculate refraction and apply to uv\n        vec3 refracted = refract(viewDirection, normal, 1.0/ior);\n        uv += refracted.xy;\n      \n        // sample environment texture\n        vec4 tex = texture2D(envMap, uv);\n      \n        // calculate fresnel\n        float fresnel = fresnelFunc(viewDirection, normal);\n      \n        vec4 color = tex;\n      \n        // apply fresnel\n        color.rgb = mix(color.rgb, reflectionColor, fresnel);\n      \n        gl_FragColor = vec4(color.rgb, 1.0);\n      }"})).uniforms={envMap:{value:e.envMap},backfaceMap:{value:e.backfaceMap},resolution:{value:e.resolution}},a}return r}(t.ShaderMaterial),p=r.p+"static/media/diamond.b09a0a55.glb",h=(r.p,r(220),r(3));function b(e){console.log("Background - props:",e);var n=e.image,r=Object(c.a)(n),a=Object(l.a)(5e3,3800);return Object(h.jsxs)("mesh",{layers:1,scale:a,children:[Object(h.jsx)("planeGeometry",{}),Object(h.jsx)("meshBasicMaterial",{map:r,"map-minFilter":t.LinearFilter,depthTest:!1})]})}function M(){var e=Object(i.d)(),n=e.size,r=e.viewport,c=e.gl,l=e.scene,d=e.camera,m=e.clock,f=Object(o.useRef)(),b=Object(s.a)(p),M=Object(o.useMemo)((function(){var e=new t.WebGLRenderTarget(n.width,n.height),r=new t.WebGLRenderTarget(n.width,n.height);return[e,r,new v,new u({envMap:e.texture,backfaceMap:r.texture,resolution:[n.width,n.height]})]}),[n]),g=Object(a.a)(M,4),w=g[0],x=g[1],j=g[2],N=g[3],O=Object(o.useMemo)((function(){return new t.Object3D}),[]),y=Object(o.useMemo)((function(){return new Array(80).fill().map((function(e,n){return{position:[n<5?0:r.width/2-Math.random()*r.width,40-40*Math.random(),n<5?26:10-20*Math.random()],factor:.1+Math.random(),direction:Math.random()<.5?-1:1,rotation:[Math.sin(Math.random())*Math.PI,Math.sin(Math.random())*Math.PI,Math.cos(Math.random())*Math.PI]}}))}),[]);return Object(i.b)((function(){y.forEach((function(e,n){var a=m.getElapsedTime();e.position[1]-=e.factor/5*e.direction,(1===e.direction?e.position[1]<-50:e.position[1]>50)&&(e.position=[n<5?0:r.width/2-Math.random()*r.width,50*e.direction,e.position[2]]);var t=e.position,o=e.rotation,i=e.factor;O.position.set(t[0],t[1],t[2]),O.rotation.set(o[0]+a*i,o[1]+a*i,o[2]+a*i),O.scale.set(1+i,1+i,1+i),O.updateMatrix(),f.current.setMatrixAt(n,O.matrix)})),f.current.instanceMatrix.needsUpdate=!0,c.autoClear=!1,d.layers.set(1),c.setRenderTarget(w),c.render(l,d),d.layers.set(0),f.current.material=j,c.setRenderTarget(x),c.clearDepth(),c.render(l,d),d.layers.set(1),c.setRenderTarget(null),c.render(l,d),c.clearDepth(),d.layers.set(0),f.current.material=N,c.render(l,d)}),1),console.log("Diamonds - gltf:",b),Object(h.jsx)("instancedMesh",{ref:f,args:[b.nodes.Cylinder.geometry,null,y.length],children:Object(h.jsx)("meshBasicMaterial",{})})}n.default=function(e){return console.log("Diamonds - App:",e),Object(h.jsx)("div",{id:"floating-diamonds",className:"",children:Object(h.jsx)(i.a,{linear:!0,camera:{fov:50,position:[0,0,30]},children:Object(h.jsxs)(o.Suspense,{fallback:null,children:[Object(h.jsx)(b,{image:e.image}),Object(h.jsx)(M,{})]})})})}}}]);
//# sourceMappingURL=23.a87368fe.chunk.js.map