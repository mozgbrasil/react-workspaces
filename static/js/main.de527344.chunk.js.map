{"version":3,"sources":["components/Util.js","reportWebVitals.js","components/bootstrap/index.js","index.js"],"names":["SpinnerFlexButton","className","type","disabled","role","React","Component","getFuncName","stack","Error","split","replace","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","__MOZG","SplashScreen","parameters","dsn","process","integrations","Integrations","BrowserTracing","tracesSampleRate","App","props","Sentry","location","hash","Loadable","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAmFaA,EAAoB,kBAC/B,qBAAKC,UAAU,6CAAf,SACE,yBAAQA,UAAU,kBAAkBC,KAAK,SAASC,UAAQ,EAA1D,UACE,sBACEF,UAAU,mCACVG,KAAK,SACL,cAAY,SAEd,sBAAMH,UAAU,UAAhB,8BAKwBI,IAAMC,UAqN7B,SAASC,IACd,IACIC,EADI,IAAIC,MAAM,SACJD,MACXE,MAAM,MAAM,GAEZC,QAAQ,sBAAuB,MAMlC,OAFAC,QAAQC,IAAI,QAAS,kCAAmCL,GAEjDA,I,sHCpTMM,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,yCCAVQ,OAAOC,O,ICgCPC,E,uBAjBEC,EAAa,CACjBC,IAAKC,4EAGLC,aAAc,CAAC,IAAIC,IAAaC,gBAIhCC,iBAAkB,GAuBpB,SAASC,EAAIC,GAEX,OADAtB,QAAQC,IAAI,SAAUqB,GAEpB,qBAAKjC,UAAU,gBAAf,SACE,cAACwB,EAAD,MAxBNU,IAAYT,GAQVD,EAD2B,KAAzBF,OAAOa,SAASC,KACHC,aACb,kBAAM,uDACN,CACEC,SAAU,cAAC,IAAD,MAICD,aAAS,kBAAM,uDAAiB,CAC7CC,SAAU,cAAC,IAAD,MAadC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACT,EAAD,MAEFU,SAASC,eAAe,SAM1B9B,M","file":"static/js/main.de527344.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport React from \"react\";\n\nexport const NikhilLoader = () => (\n  // https://codepen.io/nikhil8krishnan/pen/rVoXJa\n  // CodePen - SVG Loader Animation - Nikhil Krishnan\n  <svg\n    className='svg-loader-animation'\n    version='1.1'\n    id='L7'\n    xmlns='http://www.w3.org/2000/svg'\n    xmlnsXlink='http://www.w3.org/1999/xlink'\n    x='0px'\n    y='0px'\n    viewBox='0 0 100 100'\n    enableBackground='new 0 0 100 100'\n    xmlSpace='preserve'\n  >\n    <path\n      fill='#fff'\n      d='M31.6,3.5C5.9,13.6-6.6,42.7,3.5,68.4c10.1,25.7,39.2,38.3,64.9,28.1l-3.1-7.9c-21.3,8.4-45.4-2-53.8-23.3\n  c-8.4-21.3,2-45.4,23.3-53.8L31.6,3.5z'\n      transform='rotate(230.655 50 50)'\n    >\n      <animateTransform\n        attributeName='transform'\n        attributeType='XML'\n        type='rotate'\n        dur='2s'\n        from='0 50 50'\n        to='360 50 50'\n        repeatCount='indefinite'\n      ></animateTransform>\n    </path>\n    <path\n      fill='#fff'\n      d='M42.3,39.6c5.7-4.3,13.9-3.1,18.1,2.7c4.3,5.7,3.1,13.9-2.7,18.1l4.1,5.5c8.8-6.5,10.6-19,4.1-27.7\n  c-6.5-8.8-19-10.6-27.7-4.1L42.3,39.6z'\n      transform='rotate(-101.31 50 50)'\n    >\n      <animateTransform\n        attributeName='transform'\n        attributeType='XML'\n        type='rotate'\n        dur='1s'\n        from='0 50 50'\n        to='-360 50 50'\n        repeatCount='indefinite'\n      ></animateTransform>\n    </path>\n    <path\n      fill='#fff'\n      d='M82,35.7C74.1,18,53.4,10.1,35.7,18S10.1,46.6,18,64.3l7.6-3.4c-6-13.5,0-29.3,13.5-35.3s29.3,0,35.3,13.5\n  L82,35.7z'\n      transform='rotate(230.655 50 50)'\n    >\n      <animateTransform\n        attributeName='transform'\n        attributeType='XML'\n        type='rotate'\n        dur='2s'\n        from='0 50 50'\n        to='360 50 50'\n        repeatCount='indefinite'\n      ></animateTransform>\n    </path>\n  </svg>\n);\n\nexport const SpinnerColors = () => (\n  <div className='spinner-border text-info' role='status'>\n    <span className='sr-only'>Loading...</span>\n  </div>\n);\n\nexport const SpinnerFlex = () => (\n  <div className='d-flex justify-content-center bootom-right'>\n    <div className='spinner-border' role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  </div>\n);\n\nexport const SpinnerFlexButton = () => (\n  <div className='d-flex justify-content-center bootom-right'>\n    <button className='btn btn-primary' type='button' disabled>\n      <span\n        className='spinner-border spinner-border-sm'\n        role='status'\n        aria-hidden='true'\n      ></span>\n      <span className='sr-only'>Loading...</span>\n    </button>\n  </div>\n);\n\nexport class CCLoader extends React.Component {\n  render() {\n    // console.log(\"this: \", this);\n    return (\n      <>\n        <div className='spinner-border text-info' role='status'>\n          <span className='sr-only'>Loading...</span>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const StartupJs = (e) => {\n  //\n\n  // console.log = function() {};\n\n  //\n\n  // let obj = [{ component: RainbowRotatingDots }, { component: PureCssEye }];\n  // // console.log(\"obj: \", obj);\n  // let length = obj.length - 1;\n  // // console.log(\"keys: \", keys);\n  // let random = _.random(0, length);\n  // // console.log(\"random: \", random);\n  // let BackgroungComponent = obj[random].component;\n  // // console.log(\"BackgroungComponent: \", BackgroungComponent);\n\n  // const Loading = () => {\n  //   return (\n  //     <>\n  //       <BackgroungComponent />\n  //     </>\n  //   );\n  // };\n\n  // const App = Loadable(() => pMinDelay(import(\"./App\"), 1000), {\n  //   fallback: <Loading />\n  // });\n\n  // const App = Loadable(() => import(\"./App\"), {\n  //   fallback: <Loading />\n  // });\n\n  // const App = Loadable(() => pMinDelay(import(\"./App\"), 1000), {\n  //   fallback: <Loading />\n  // });\n\n  // const App = () => {\n  //   return <div>Hello World!</div>;\n  // };\n\n  // console.log(\"location: \", window.location);\n\n  // window.__MOZG = [];\n\n  // console.log(\"__dirname: \", __dirname);\n  // console.log(\"__filename: \", __filename);\n  // console.log(\"global: \", global);\n\n  // let obj = {\n  //   window: window,\n  //   global: global,\n  //   \"$.fn\": $.fn\n  // };\n\n  // for (var [key, value] of Object.entries(obj)) {\n  //   let label = key;\n  //   console.log(`${label}: `, Object.getOwnPropertyNames(value).sort());\n  //   console.log(`${label}: `, Object.getOwnPropertySymbols(value).sort());\n  // }\n\n  //   (function() {\n  //     \"use strict\";\n\n  // })();\n\n  //   obj = req.keys().map(req);\n\n  //   console.log(\"obj\", obj);\n\n  //   // obj = _.chain(obj)\n  //   //   .map(function(value, index) {\n  //   //     // console.log(\"value\", value);\n  //   //     var value = _.replace(value, \"/react-labs/static/media/\", \"\");\n  //   //     // console.log(\"value\", value);\n  //   //     return value;\n  //   //   })\n  //   //   .value();\n\n  //   console.log(\"obj\", obj);\n  //   console.log(\"obj\", typeof obj);\n\n  //\n\n  //   let obj = {\n  //     window: window\n  //   };\n\n  //   for (var [key, value] of Object.entries(obj)) {\n  //     let label = key;\n  //     console.log(`${label}: `, Object.getOwnPropertyNames(value).sort());\n  //   }\n\n  //\n\n  //   if (window.__MOZG) {\n  //     let WimdowGetOwnPropertyNames_MOZG =\n  //       window.__MOZG.WimdowGetOwnPropertyNames;\n\n  //     let difference = _.difference(\n  //       WimdowGetOwnPropertyNames,\n  //       WimdowGetOwnPropertyNames_MOZG\n  //     );\n  //     console.log(\"difference in index.js: \", difference);\n  //   }\n\n  //   console.log(\"index\", `window: `, Object.getOwnPropertyNames(window).sort());\n  //   console.log(\"index\", `window.__MOZG: `, window.__MOZG);\n  //   console.log(\n  //     \"index\",\n  //     `window.__MOZG: `,\n  //     Object.getOwnPropertyNames(window.__MOZG).sort()\n  //   );\n\n  //\n\n  // let arrConsole = [];\n  // let orig = console.log;\n  // console.log = function log() {\n  //   orig.apply(console, [\n  //     `[${new Date()\n  //       .toISOString()\n  //       .replace(\"T\", \" \")\n  //       .replace(/\\..+/, \"\")}]`,\n  //     ...arguments\n  //   ]);\n  //   arrConsole.push(...arguments);\n  // };\n\n  //\n\n  //   console.log(\"process: \", process);\n  //   console.log(\"process.env: \", process.env);\n\n  //\n\n  let message = {\n    from: \"mozg_index\",\n  };\n\n  let targetOrigin = \"*\";\n\n  window.postMessage(message, targetOrigin);\n\n  //\n\n  window.addEventListener(\"message\", receiveMessage, false);\n\n  function receiveMessage(event) {\n    //   console.log(\"index\", \"receiveMessage: \", event);\n  }\n\n  //\n};\n\nexport const DumpVars = () => {\n  let obj = {\n    \"window: \": window,\n  };\n\n  for (var [key, value] of Object.entries(obj)) {\n    let obj = value;\n    let label = key;\n    obj = Object.getOwnPropertyNames(obj).sort();\n    console.log(`${label}: `, obj);\n    //\n    let filter = _.chain(obj)\n      .map(function (item, index) {\n        //   console.log(\"arguments\", arguments);\n        //   console.log(\"item: \", item);\n        let condition = item.startsWith(\"i\") ? item : \"\";\n        //   console.log(\"condition: \", condition);\n        return condition;\n      })\n      .compact()\n      .value();\n    console.log(\"filter: \", filter);\n  }\n};\n\n// https://gist.github.com/kelvearagao/87dd59958ca9fa22118a\n/**\n * Recebe um data no formato dd/mm/yyyy e retorna yyyy-mm-dd.\n *\n * @param string date - Data no formato 'dd/mm/yyyy'.\n * @return string - Data no formato 'yyyy-mm-dd'.\n */\nexport function dateToEN(date) {\n  return date.split(\"/\").reverse().join(\"-\");\n}\n\nexport const getDifferenceProperties = () => {\n  let WimdowGetOwnPropertyNames_MOZG = window.__MOZG.WimdowGetOwnPropertyNames;\n  let WimdowGetOwnPropertyNames = Object.getOwnPropertyNames(window).sort();\n  let difference = _.difference(\n    WimdowGetOwnPropertyNames,\n    WimdowGetOwnPropertyNames_MOZG\n  );\n  console.log(\"difference: \", difference);\n};\n\nexport function getFuncName() {\n  var e = new Error(\"dummy\");\n  var stack = e.stack\n    .split(\"\\n\")[2]\n    // \" at functionName ( ...\" => \"functionName\"\n    .replace(/^\\s+at\\s+(.+?)\\s.+/g, \"$1\");\n\n  // console.log(\"e: \", e);\n  // console.log(\"stack: \", stack);\n  console.log(\"%c - \", \"background: #222; color: yellow\", stack);\n\n  return stack;\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n// import \"@fortawesome/fontawesome-free/js/all.js\";\n\nimport \"./extend.scss\"; // bootstrap\n\nif (window.__MOZG) {\n  //   window.__MOZG.args = { jquery: $.fn.jquery };\n  //   console.log(\"window.__MOZG: \", window.__MOZG);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./global.css\";\n// import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// console.log(\"process.env: \", process.env);\n// console.log(\n//   'React->getOwnPropertyNames: ',\n//   Object.getOwnPropertyNames(React).sort()\n// );\n// console.log(\"React.version: \", React.version);\n// Object.getOwnPropertyNames(Chart)\n//   .sort()\n//   .forEach(function (val, idx, array) {\n//     console.log(`React->${val}: `, Chart[val]);\n//   });\n\n// logs\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nconst parameters = {\n  dsn: process.env.REACT_APP_SENTRY_DSN,\n  // To set your release version\n  //   release,\n  integrations: [new Integrations.BrowserTracing()],\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n};\n\nSentry.init(parameters);\n\n// App\nimport \"./components/bootstrap\";\nimport Loadable from \"@loadable/component\";\nimport { SpinnerFlexButton as Loading } from \"./components/Util\";\nlet SplashScreen;\nif (window.location.hash === \"\") {\n  SplashScreen = Loadable(\n    () => import(\"codepen.io/pl-intro-animation-w-gsap-timelinemax\"),\n    {\n      fallback: <Loading />,\n    }\n  );\n} else {\n  SplashScreen = Loadable(() => import(\"./App\"), {\n    fallback: <Loading />,\n  });\n}\n\nfunction App(props) {\n  console.log(\"Index:\", props);\n  return (\n    <div className='splash-screen'>\n      <SplashScreen />\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}