{"version":3,"sources":["../../../shared/codesandbox.io/floating-diamonds/src/backface-material/index.js","../../../shared/codesandbox.io/floating-diamonds/src/refraction-material/index.js","../../../shared/codesandbox.io/floating-diamonds/src/assets/diamond.glb","../../../shared/codesandbox.io/floating-diamonds/src/assets/233.jpg","../../../shared/codesandbox.io/floating-diamonds/src/App.js"],"names":["RefractionMaterial","options","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","uniforms","envMap","value","backfaceMap","resolution","Background","props","console","log","bgUrl","image","texture","useTexture","size","useAspect","layers","scale","map","LinearFilter","depthTest","Diamonds","useThree","viewport","gl","scene","camera","clock","model","useRef","gltf","useGLTF","diamondUrl","useMemo","envFbo","WebGLRenderTarget","width","height","backfaceFbo","BackfaceMaterial","backfaceMaterial","refractionMaterial","dummy","Object3D","diamonds","Array","fill","_","i","position","Math","random","factor","direction","rotation","sin","PI","cos","useFrame","forEach","data","t","getElapsedTime","set","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","setRenderTarget","render","material","clearDepth","ref","args","nodes","Cylinder","geometry","length","App","id","className","linear","fov","fallback"],"mappings":"oQAEqBA,E,kDACnB,WAAYC,GAAU,uCACd,CACJC,aAAa,igBAabC,eAAe,0GAIfC,KAAMC,a,UApBoCC,kBCA3BN,E,kDACnB,WAAYC,GAAU,IAAD,8BACnB,cAAM,CACJC,aAAa,+qBAgBbC,eAAe,60CA8CZI,SAAW,CACdC,OAAQ,CAAEC,MAAOR,EAAQO,QACzBE,YAAa,CAAED,MAAOR,EAAQS,aAC9BC,WAAY,CAAEF,MAAOR,EAAQU,aAnEZ,E,UADyBL,kBCFjC,MAA0B,oC,GCA1B,I,aCWf,SAASM,EAAWC,GAClBC,QAAQC,IAAI,sBAAuBF,GACnC,IAAIG,EAAQH,EAAMI,MACZC,EAAUC,YAAWH,GACrBI,EAAOC,YAAU,IAAM,MAC7B,OACE,uBAAMC,OAAQ,EAAGC,MAAOH,EAAxB,UACE,kCACA,mCAAmBI,IAAKN,EAAS,gBAAeO,eAAcC,WAAW,OAK/E,SAASC,IACP,MAAqDC,cAA7CR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,GAAIC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,OAAQC,EAA3C,EAA2CA,MACrCC,EAAQC,mBACRC,EAAOC,YAAQC,GAGrB,EAAoEC,mBAAQ,WAC1E,IAAMC,EAAS,IAAIC,oBAAkBrB,EAAKsB,MAAOtB,EAAKuB,QAChDC,EAAc,IAAIH,oBAAkBrB,EAAKsB,MAAOtB,EAAKuB,QAG3D,MAAO,CAACH,EAAQI,EAFS,IAAIC,EACF,IAAI7C,EAAmB,CAAEQ,OAAQgC,EAAOtB,QAASR,YAAakC,EAAY1B,QAASP,WAAY,CAACS,EAAKsB,MAAOtB,EAAKuB,aAE3I,CAACvB,IANJ,mBAAOoB,EAAP,KAAeI,EAAf,KAA4BE,EAA5B,KAA8CC,EAA9C,KASMC,EAAQT,mBAAQ,kBAAM,IAAIU,aAAY,IACtCC,EAAWX,mBACf,kBACE,IAAIY,MAAM,IAAIC,OAAO5B,KAAI,SAAC6B,EAAGC,GAAJ,MAAW,CAClCC,SAAU,CAACD,EAAI,EAAI,EAAIzB,EAASa,MAAQ,EAAIc,KAAKC,SAAW5B,EAASa,MAAO,GAAqB,GAAhBc,KAAKC,SAAeH,EAAI,EAAI,GAAK,GAAqB,GAAhBE,KAAKC,UAC5HC,OAAQ,GAAMF,KAAKC,SACnBE,UAAWH,KAAKC,SAAW,IAAO,EAAI,EACtCG,SAAU,CAACJ,KAAKK,IAAIL,KAAKC,UAAYD,KAAKM,GAAIN,KAAKK,IAAIL,KAAKC,UAAYD,KAAKM,GAAIN,KAAKO,IAAIP,KAAKC,UAAYD,KAAKM,UAEpH,IA2CF,OAvCAE,aAAS,WAEPd,EAASe,SAAQ,SAACC,EAAMZ,GACtB,IAAMa,EAAIlC,EAAMmC,iBAChBF,EAAKX,SAAS,IAAOW,EAAKR,OAAS,EAAKQ,EAAKP,WACtB,IAAnBO,EAAKP,UAAkBO,EAAKX,SAAS,IAAM,GAAKW,EAAKX,SAAS,GAAK,MACrEW,EAAKX,SAAW,CAACD,EAAI,EAAI,EAAIzB,EAASa,MAAQ,EAAIc,KAAKC,SAAW5B,EAASa,MAAO,GAAKwB,EAAKP,UAAWO,EAAKX,SAAS,KACvH,IAAQA,EAA+BW,EAA/BX,SAAUK,EAAqBM,EAArBN,SAAUF,EAAWQ,EAAXR,OAC5BV,EAAMO,SAASc,IAAId,EAAS,GAAIA,EAAS,GAAIA,EAAS,IACtDP,EAAMY,SAASS,IAAIT,EAAS,GAAKO,EAAIT,EAAQE,EAAS,GAAKO,EAAIT,EAAQE,EAAS,GAAKO,EAAIT,GACzFV,EAAMzB,MAAM8C,IAAI,EAAIX,EAAQ,EAAIA,EAAQ,EAAIA,GAC5CV,EAAMsB,eACNpC,EAAMqC,QAAQC,YAAYlB,EAAGN,EAAMyB,WAErCvC,EAAMqC,QAAQG,eAAeC,aAAc,EAE3C7C,EAAG8C,WAAY,EACf5C,EAAOV,OAAO+C,IAAI,GAClBvC,EAAG+C,gBAAgBrC,GACnBV,EAAGgD,OAAO/C,EAAOC,GAEjBA,EAAOV,OAAO+C,IAAI,GAClBnC,EAAMqC,QAAQQ,SAAWjC,EACzBhB,EAAG+C,gBAAgBjC,GACnBd,EAAGkD,aACHlD,EAAGgD,OAAO/C,EAAOC,GAEjBA,EAAOV,OAAO+C,IAAI,GAClBvC,EAAG+C,gBAAgB,MACnB/C,EAAGgD,OAAO/C,EAAOC,GACjBF,EAAGkD,aAEHhD,EAAOV,OAAO+C,IAAI,GAClBnC,EAAMqC,QAAQQ,SAAWhC,EACzBjB,EAAGgD,OAAO/C,EAAOC,KAChB,GAEHlB,QAAQC,IAAI,mBAAoBqB,GAG9B,+BAAe6C,IAAK/C,EAAOgD,KAAM,CAAC9C,EAAK+C,MAAMC,SAASC,SAAU,KAAMnC,EAASoC,QAA/E,SACE,wCAmBSC,UAdf,SAAa1E,GAEX,OADAC,QAAQC,IAAI,kBAAmBF,GAE7B,qBAAK2E,GAAG,oBAAoBC,UAAU,GAAtC,SACE,cAAC,IAAD,CAAQC,QAAM,EAAC1D,OAAQ,CAAE2D,IAAK,GAAIpC,SAAU,CAAC,EAAG,EAAG,KAAnD,SACE,eAAC,WAAD,CAAUqC,SAAU,KAApB,UACE,cAAChF,EAAD,CAAYK,MAAOJ,EAAMI,QACzB,cAACU,EAAD","file":"static/js/23.a87368fe.chunk.js","sourcesContent":["import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0);\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize(worldPosition.xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      \n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      float ior = 1.5;\n      float a = 0.33;\n      \n      vec3 fogColor = vec3(1.0);\n      vec3 reflectionColor = vec3(1.0);\n      \n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow( 1.08 + dot( viewDirection, worldNormal), 10.0 );\n      }\n      \n      void main() {\n        // screen coordinates\n        vec2 uv = gl_FragCoord.xy / resolution;\n      \n        // sample backface data from texture\n        vec3 backfaceNormal = texture2D(backfaceMap, uv).rgb;\n      \n        // combine backface and frontface normal\n        vec3 normal = worldNormal * (1.0 - a) - backfaceNormal * a;\n      \n        // calculate refraction and apply to uv\n        vec3 refracted = refract(viewDirection, normal, 1.0/ior);\n        uv += refracted.xy;\n      \n        // sample environment texture\n        vec4 tex = texture2D(envMap, uv);\n      \n        // calculate fresnel\n        float fresnel = fresnelFunc(viewDirection, normal);\n      \n        vec4 color = tex;\n      \n        // apply fresnel\n        color.rgb = mix(color.rgb, reflectionColor, fresnel);\n      \n        gl_FragColor = vec4(color.rgb, 1.0);\n      }`\n    })\n\n    this.uniforms = {\n      envMap: { value: options.envMap },\n      backfaceMap: { value: options.backfaceMap },\n      resolution: { value: options.resolution }\n    }\n  }\n}\n","export default __webpack_public_path__ + \"static/media/diamond.b09a0a55.glb\";","export default __webpack_public_path__ + \"static/media/233.5cb32d43.jpg\";","import { TextureLoader, WebGLRenderTarget, Object3D, LinearFilter } from \"three\"\nimport React, { Suspense, useMemo, useRef } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Canvas, useThree, useFrame } from \"@react-three/fiber\"\nimport { useAspect, useGLTF, useTexture } from \"@react-three/drei\"\nimport BackfaceMaterial from \"./backface-material\"\nimport RefractionMaterial from \"./refraction-material\"\nimport diamondUrl from \"./assets/diamond.glb\"\nimport textureUrl from \"./assets/233.jpg\"\nimport \"./styles.css\"\n\nfunction Background(props) {\n  console.log(\"Background - props:\", props)\n  let bgUrl = props.image //? props.image : textureUrl\n  const texture = useTexture(bgUrl)\n  const size = useAspect(5000, 3800)\n  return (\n    <mesh layers={1} scale={size}>\n      <planeGeometry />\n      <meshBasicMaterial map={texture} map-minFilter={LinearFilter} depthTest={false} />\n    </mesh>\n  )\n}\n\nfunction Diamonds() {\n  const { size, viewport, gl, scene, camera, clock } = useThree()\n  const model = useRef()\n  const gltf = useGLTF(diamondUrl)\n\n  // Create Fbo's and materials\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width, size.height)\n    const backfaceFbo = new WebGLRenderTarget(size.width, size.height)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({ envMap: envFbo.texture, backfaceMap: backfaceFbo.texture, resolution: [size.width, size.height] })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size])\n\n  // Create random position data\n  const dummy = useMemo(() => new Object3D(), [])\n  const diamonds = useMemo(\n    () =>\n      new Array(80).fill().map((_, i) => ({\n        position: [i < 5 ? 0 : viewport.width / 2 - Math.random() * viewport.width, 40 - Math.random() * 40, i < 5 ? 26 : 10 - Math.random() * 20],\n        factor: 0.1 + Math.random(),\n        direction: Math.random() < 0.5 ? -1 : 1,\n        rotation: [Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI]\n      })),\n    []\n  )\n\n  // Render-loop\n  useFrame(() => {\n    // Update instanced diamonds\n    diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime()\n      data.position[1] -= (data.factor / 5) * data.direction\n      if (data.direction === 1 ? data.position[1] < -50 : data.position[1] > 50)\n        data.position = [i < 5 ? 0 : viewport.width / 2 - Math.random() * viewport.width, 50 * data.direction, data.position[2]]\n      const { position, rotation, factor } = data\n      dummy.position.set(position[0], position[1], position[2])\n      dummy.rotation.set(rotation[0] + t * factor, rotation[1] + t * factor, rotation[2] + t * factor)\n      dummy.scale.set(1 + factor, 1 + factor, 1 + factor)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n    })\n    model.current.instanceMatrix.needsUpdate = true\n    // Render env to fbo\n    gl.autoClear = false\n    camera.layers.set(1)\n    gl.setRenderTarget(envFbo)\n    gl.render(scene, camera)\n    // Render cube backfaces to fbo\n    camera.layers.set(0)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    // Render env to screen\n    camera.layers.set(1)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    // Render cube with refraction material to screen\n    camera.layers.set(0)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  console.log(\"Diamonds - gltf:\", gltf)\n\n  return (\n    <instancedMesh ref={model} args={[gltf.nodes.Cylinder.geometry, null, diamonds.length]}>\n      <meshBasicMaterial />\n    </instancedMesh>\n  )\n}\n\nfunction App(props) {\n  console.log(\"Diamonds - App:\", props)\n  return (\n    <div id=\"floating-diamonds\" className=\"\">\n      <Canvas linear camera={{ fov: 50, position: [0, 0, 30] }}>\n        <Suspense fallback={null}>\n          <Background image={props.image} />\n          <Diamonds />\n        </Suspense>\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App\n"],"sourceRoot":""}